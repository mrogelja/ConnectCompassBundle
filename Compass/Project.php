<?php
/**
 * Created by IntelliJ IDEA.
 * User: hypermedia
 * Date: 09/01/14
 * Time: 14:53
 * To change this template use File | Settings | File Templates.
 */

namespace Mrogelja\ConnectCompassBundle\Compass;

use Mrogelja\ConnectCompassBundle\Proxy\Proxy;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Filesystem\Exception\IOExceptionInterface;
use Symfony\Component\Finder\Finder;

use Mrogelja\ConnectCompassBundle\Model\SassVariable;

class Project {
    /**
     * @var $path project path
     */
    public $path;
    /**
     * @var $proxy source proxy
     */
    public $proxy;

    /**
     * @param $path
     * @param Proxy $proxy
     */
    public function __construct($path, Proxy $proxy)
    {
        $this->path  = $path;
        $this->proxy = $proxy;
    }

    /**
     * Save SASS variables in database
     * @param SassVariable $sassVariable
     */
    public function saveSassVariable(SassVariable $sassVariable)
    {
        $this->proxy->saveSassVariable($sassVariable);
        $this->dump();
    }

    /**
     * Delete SASS variables from database and
     * @param SassVariable $sassVariable
     */
    public function deleteSassVariable(SassVariable $sassVariable)
    {
        $this->proxy->deleteSassVariable($sassVariable);
        $this->dump();
    }

    /**
     * Get SASS variable by name
     */
    public function getSassVariableByName($sassVariableName)
    {
        return $this->proxy->getSassVariableByName($sassVariableName);
    }

    /**
     * Get SASS variables from database
     */
    public function getSassVariables()
    {
        return $this->proxy->getSassVariables();
    }

    /**
     * Dump SASS variables from database to SASS file
     */
    public function dump()
    {
        $fs = new Filesystem();

        if ($fs->exists($this->path)) {
            $file = new \SplFileInfo($this->path);
            $lastModification = new \DateTime();
            $lastModification->setTimestamp($file->getMTime());


            if ($this->proxy->isFresh($lastModification)) {
                return;
            }
        }

        $date = new \DateTime();

        $content = <<<SASS
/**
  * Autogenerated file by ConnectCompassBundle at {$date->format('l jS \of F Y h:i:s A')}
  */


SASS;

        foreach ($this->proxy->getSassVariables() as $sassVariable) {
            $content .= <<<SASS
/** {$sassVariable->getComment()} */
{$sassVariable->getName()} : {$sassVariable->getValue()};


SASS;
        }

        $fs->dumpFile($this->path, $content);
    }

    /**
     * Import SASS variables from SASS file to database
     */
    public function import()
    {
        $fs = new Filesystem();

        if (!$fs->exists($this->path)) {
           return;
        }

        $content = file_get_contents($this->path);

        foreach (preg_split('/((\r?\n)|(\r\n?))/', $content) as $line) {
            $line = trim($line);

            if (0 !== preg_match('|(\$[^:]*):([^;]*);|', $line, $buffer)) {
                $variableName  = trim($buffer[1]);
                $variableValue = trim($buffer[2]);

                if (isset($lastLine) and 0 !== preg_match('|/\*(.*)\*/|', $lastLine, $buffer)) {
                  $variableComment = trim($buffer[1]);
                } else {
                  $variableComment = '';
                }

                $this->proxy->addSassVariable($variableName, $variableValue, $variableComment);

                unset($lastLine);

            } else if (!empty($line)) {
                $lastLine = $line;
            }
        }
    }
}